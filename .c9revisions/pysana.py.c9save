{"ts":1348868736497,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#! /usr/bin/python\nimport requests\nimport json\n\n\nclass API(object):\n    def __init__(self, key):\n        \"\"\"\n        workspaces, projects, and users are arrays of dicts.\n        The workspaces array stores in the following way:\n        {\n            'id': 12345869,\n            'name': 'workspace_name'\n        }\n        Please note that the ID is not a string. Asana's docs do not reflect\n        that the ID may contain characters, however it is possible in the tests\n        that have been run. If a string representation of the ID field is\n        passed back to the Asana API, an error will occur and the response will\n        say that the workspace does not exist. Instead, pysana handles the\n        string conversion. Python will read the ID as a Long.\n        \"\"\"\n        self.key = key\n        self.url = 'https://app.asana.com/api'\n        self.api_version = '1.0'\n        self.api_url = self.url + \"/\" + self.api_version\n        self.workspaces = []\n        self.projects = []\n        self.users = []\n\n    # Self Maintenance\n    def update_workspaces(self):\n        current = self.workspaces_list()\n        for workspace in current:\n            if workspace not in self.workspaces:\n                self.workspaces.append(workspace)\n\n    def update_projects(self):\n        current = self.project_list()\n        for project in current:\n            if project not in self.projects:\n                self.projects.append(project)\n\n    def update_users(self):\n        current = self.users_list()\n        for user in current:\n            if user not in self.users:\n                self.users.append(user)\n\n    # Projects\n    def projects_list(self, workspace_id=None):\n        url = self.api_url\n        if workspace_id:\n            url += '/workspaces/' + str(workspace_id) + '/projects'\n        else:\n            url += '/projects'\n        return self.get_data(url)\n\n    def project_tasks(self, project_id):\n        url = self.api_url + '/projects/' + str(project_id) + '/tasks'\n        return self.get_data(url)\n\n    def project_details(self, project_id):\n        url = self.api_url + '/projects/' + str(project_id)\n        return self.get_data(url)\n\n    def new_project(self, workspace_id, project_name, project_notes=None):\n        url = self.api_url + '/workspaces/' + str(workspace_id) + '/projects'\n        put_data = {'name': project_name, 'id': workspace_id}\n        if project_notes:\n            put_data['notes'] = project_notes\n        else:\n            put_data['notes'] = ''\n        return self.post_data(url, put_data)\n\n    def project_change_details(self, project_id, project_name=None, project_notes=None):\n        url = self.api_url + '/projects/' + str(project_id)\n        put_data = {}\n        if project_name:\n            put_data['name'] = project_name\n        if project_notes:\n            put_data['notes'] = project_notes\n        return self.post_data(url, put_data)\n\n    # Users\n    def users_list(self):\n        \"\"\"\n        This method return all users in all workspaces. It does not return what\n        work space the user belongs to.\n        \"\"\"\n        url = self.api_url + '/users'\n        return self.get_data(url)\n\n    def users_in_workspace(self, workspace_id):\n        \"\"\"\n        Returns list of users in a specific workspace. Use the workspace id\n        from the workspace field (the key is 'id'). Alternatively, the id\n        may be provided manually.\n        \"\"\"\n        url = self.api_url + '/workspaces/' + str(workspace_id) + '/users'\n        return self.get_data(url)\n\n    def user_details(self, user_id):\n        \"\"\"\n        Returns the details on a given user including member workspaces.\n        \"\"\"\n        url = self.api_url + '/users/' + str(user_id)\n        return self.get_data(url)\n\n    # Workspaces\n    def workspaces_list(self):\n        url = self.api_url + '/workspaces'\n        return self.get_data(url)\n\n    def workspace_details(self, workspace_id):\n        url = self.api_url + '/workspace/' + str(workspace_id)\n        return self.get_data(url)\n\n    def workspace_name(self, workspace_id, workspace_name):\n        url = self.api_url + '/workspace/' + str(workspace_id)\n        put_data = {'name': workspace_name}\n        return self.post_data(url, put_data)\n\n    # Utility methods\n    def get_data(self, url):\n        \"\"\"\n        Users are responsible for handling what happens when\n        an error is received. The JSON returned will have the\n        following format:\n\n        {\"errors\":[{\"message\":\"Request data must be a JSON object, not null\"}]}\n        or \n        {\"errors\":[{\"message\":\"No matching route for request\"}]}\n\n        Pysana will return the errors dict or the data dict.\n        \"\"\"\n        get_request = requests.get(url, auth=(self.key, ''))\n        j = json.loads(get_request.text)\n        if 'errors' in j:\n            return j\n        else:\n            return j['data']\n\n    def post_data(self, url, put_data):\n        post_request = requests.post(url, auth=(self.key, ''), data=(put_data))\n        j = json.loads(post_request.text)\n        if 'errors' in j:\n            return j\n        else:\n            return j['data']\n"]],"start1":0,"start2":0,"length1":0,"length2":5116}]],"length":5116}
{"contributors":[],"silentsave":true,"ts":1354296695663,"patch":[[{"diffs":[[0,"n/python"],[1,"\r"],[0,"\nimport "]],"start1":10,"start2":10,"length1":16,"length2":17},{"diffs":[[0,"requests"],[1,"\r"],[0,"\nimport "]],"start1":27,"start2":27,"length1":16,"length2":17},{"diffs":[[0,"ort json"],[-1,"\n\n"],[1,"\r\n\r\n\r"],[0,"\nclass A"]],"start1":40,"start2":40,"length1":18,"length2":21},{"diffs":[[0,"object):"],[1,"\r"],[0,"\n    def"]],"start1":64,"start2":64,"length1":16,"length2":17},{"diffs":[[0,"f, key):"],[1,"\r"],[0,"\n       "]],"start1":94,"start2":94,"length1":16,"length2":17},{"diffs":[[0,"y):\r\n        \"\"\""],[1,"\r"],[0,"\n        workspa"]],"start1":99,"start2":99,"length1":32,"length2":33},{"diffs":[[0,"f dicts."],[1,"\r"],[0,"\n       "]],"start1":169,"start2":169,"length1":16,"length2":17},{"diffs":[[0,"ing way:"],[1,"\r"],[0,"\n       "]],"start1":228,"start2":228,"length1":16,"length2":17},{"diffs":[[0,"       {"],[1,"\r"],[0,"\n       "]],"start1":239,"start2":239,"length1":16,"length2":17},{"diffs":[[0,"2345869,"],[1,"\r"],[0,"\n       "]],"start1":268,"start2":268,"length1":16,"length2":17},{"diffs":[[0,"ce_name'"],[1,"\r"],[0,"\n       "]],"start1":306,"start2":306,"length1":16,"length2":17},{"diffs":[[0,"       }"],[1,"\r"],[0,"\n       "]],"start1":317,"start2":317,"length1":16,"length2":17},{"diffs":[[0," reflect"],[1,"\r"],[0,"\n       "]],"start1":395,"start2":395,"length1":16,"length2":17},{"diffs":[[0,"he tests"],[1,"\r"],[0,"\n       "]],"start1":476,"start2":476,"length1":16,"length2":17},{"diffs":[[0,"field is"],[1,"\r"],[0,"\n       "]],"start1":551,"start2":551,"length1":16,"length2":17},{"diffs":[[0,"nse will"],[1,"\r"],[0,"\n       "]],"start1":632,"start2":632,"length1":16,"length2":17},{"diffs":[[0," handles the"],[1,"\r"],[0,"\n        str"]],"start1":704,"start2":704,"length1":24,"length2":25},{"diffs":[[0," a Long."],[1,"\r"],[0,"\n       "]],"start1":771,"start2":771,"length1":16,"length2":17},{"diffs":[[0,"ng.\r\n        \"\"\""],[1,"\r"],[0,"\n        self.ke"]],"start1":776,"start2":776,"length1":32,"length2":33},{"diffs":[[0,"ey = key"],[1,"\r"],[0,"\n       "]],"start1":808,"start2":808,"length1":16,"length2":17},{"diffs":[[0,"com/api'"],[1,"\r"],[0,"\n       "]],"start1":856,"start2":856,"length1":16,"length2":17},{"diffs":[[0," = '1.0'"],[1,"\r"],[0,"\n       "]],"start1":890,"start2":890,"length1":16,"length2":17},{"diffs":[[0,"_version"],[1,"\r"],[0,"\n       "]],"start1":948,"start2":948,"length1":16,"length2":17},{"diffs":[[0,"kspaces = []"],[1,"\r"],[0,"\n        sel"]],"start1":974,"start2":974,"length1":24,"length2":25},{"diffs":[[0,"cts = []"],[1,"\r"],[0,"\n       "]],"start1":1006,"start2":1006,"length1":16,"length2":17},{"diffs":[[0,"ers = []"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    # S"]],"start1":1031,"start2":1031,"length1":17,"length2":19},{"diffs":[[0,"ntenance"],[1,"\r"],[0,"\n    def"]],"start1":1057,"start2":1057,"length1":16,"length2":17},{"diffs":[[0,"orkspaces(self):"],[1,"\r"],[0,"\n        current"]],"start1":1083,"start2":1083,"length1":32,"length2":33},{"diffs":[[0,"orkspaces_list()"],[1,"\r"],[0,"\n        for wor"]],"start1":1125,"start2":1125,"length1":32,"length2":33},{"diffs":[[0,"pace in current:"],[1,"\r"],[0,"\n            if "]],"start1":1160,"start2":1160,"length1":32,"length2":33},{"diffs":[[0,"kspaces:"],[1,"\r"],[0,"\n       "]],"start1":1218,"start2":1218,"length1":16,"length2":17},{"diffs":[[0,"rkspace)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    def"]],"start1":1269,"start2":1269,"length1":17,"length2":19},{"diffs":[[0,"_projects(self):"],[1,"\r"],[0,"\n        current"]],"start1":1295,"start2":1295,"length1":32,"length2":33},{"diffs":[[0,".project"],[1,"s"],[0,"_list()"],[1,"\r"],[0,"\n       "]],"start1":1335,"start2":1335,"length1":23,"length2":25},{"diffs":[[0,"ject in current:"],[1,"\r"],[0,"\n            if "]],"start1":1368,"start2":1368,"length1":32,"length2":33},{"diffs":[[0,"rojects:"],[1,"\r"],[0,"\n       "]],"start1":1422,"start2":1422,"length1":16,"length2":17},{"diffs":[[0,"project)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    def"]],"start1":1469,"start2":1469,"length1":17,"length2":19},{"diffs":[[0,"users(self):"],[1,"\r"],[0,"\n        cur"]],"start1":1496,"start2":1496,"length1":24,"length2":25},{"diffs":[[0,"s_list()"],[1,"\r"],[0,"\n       "]],"start1":1537,"start2":1537,"length1":16,"length2":17},{"diffs":[[0,"current:"],[1,"\r"],[0,"\n       "]],"start1":1567,"start2":1567,"length1":16,"length2":17},{"diffs":[[0,"f.users:"],[1,"\r"],[0,"\n       "]],"start1":1607,"start2":1607,"length1":16,"length2":17},{"diffs":[[0,"nd(user)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    # P"]],"start1":1648,"start2":1648,"length1":17,"length2":19},{"diffs":[[0,"Projects"],[1,"\r"],[0,"\n    def"]],"start1":1666,"start2":1666,"length1":16,"length2":17},{"diffs":[[0,"ce_id=None):"],[1,"\r"],[0,"\n        url"]],"start1":1711,"start2":1711,"length1":24,"length2":25},{"diffs":[[0,".api_url"],[1,"\r"],[0,"\n       "]],"start1":1743,"start2":1743,"length1":16,"length2":17},{"diffs":[[0,"pace_id:"],[1,"\r"],[0,"\n       "]],"start1":1769,"start2":1769,"length1":16,"length2":17},{"diffs":[[0,"d) + '/projects'"],[1,"\r"],[0,"\n        else:\n "]],"start1":1830,"start2":1830,"length1":32,"length2":33},{"diffs":[[0,"'\r\n        else:"],[1,"\r"],[0,"\n            url"]],"start1":1845,"start2":1845,"length1":32,"length2":33},{"diffs":[[0,"l += '/projects'"],[1,"\r"],[0,"\n        return "]],"start1":1877,"start2":1877,"length1":32,"length2":33},{"diffs":[[0,"lf.get_data(url)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    def project"]],"start1":1912,"start2":1912,"length1":33,"length2":35},{"diffs":[[0,"lf, project_id):"],[1,"\r"],[0,"\n        url = s"]],"start1":1956,"start2":1956,"length1":32,"length2":33},{"diffs":[[0,"'/tasks'"],[1,"\r"],[0,"\n       "]],"start1":2036,"start2":2036,"length1":16,"length2":17},{"diffs":[[0,"lf.get_data(url)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    def project"]],"start1":2063,"start2":2063,"length1":33,"length2":35},{"diffs":[[0,"project_id):"],[1,"\r"],[0,"\n        url"]],"start1":2113,"start2":2113,"length1":24,"length2":25},{"diffs":[[0," str(project_id)"],[1,"\r"],[0,"\n        return "]],"start1":2170,"start2":2170,"length1":32,"length2":33},{"diffs":[[0,"lf.get_data(url)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    def new_pro"]],"start1":2205,"start2":2205,"length1":33,"length2":35},{"diffs":[[0,"ect_notes=None):"],[1,"\r"],[0,"\n        url = s"]],"start1":2283,"start2":2283,"length1":32,"length2":33},{"diffs":[[0,"rojects'"],[1,"\r"],[0,"\n       "]],"start1":2370,"start2":2370,"length1":16,"length2":17},{"diffs":[[0,"ects'\r\n        p"],[-1,"u"],[1,"os"],[0,"t_data = {'name'"]],"start1":2373,"start2":2373,"length1":33,"length2":34},{"diffs":[[0,"pace_id}"],[1,"\r"],[0,"\n       "]],"start1":2434,"start2":2434,"length1":16,"length2":17},{"diffs":[[0,"f project_notes:"],[1,"\r"],[0,"\n            put"]],"start1":2453,"start2":2453,"length1":32,"length2":33},{"diffs":[[0,":\r\n            p"],[-1,"u"],[1,"os"],[0,"t_data['notes'] "]],"start1":2468,"start2":2468,"length1":33,"length2":34},{"diffs":[[0," = project_notes"],[1,"\r"],[0,"\n        else:\n "]],"start1":2501,"start2":2501,"length1":32,"length2":33},{"diffs":[[0,"s\r\n        else:"],[1,"\r"],[0,"\n            put"]],"start1":2516,"start2":2516,"length1":32,"length2":33},{"diffs":[[0,":\r\n            p"],[-1,"u"],[1,"os"],[0,"t_data['notes'] "]],"start1":2531,"start2":2531,"length1":33,"length2":34},{"diffs":[[0,"s'] = ''"],[1,"\r"],[0,"\n       "]],"start1":2561,"start2":2561,"length1":16,"length2":17},{"diffs":[[0,"_data(url, p"],[-1,"u"],[1,"os"],[0,"t_data)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    def pro"]],"start1":2595,"start2":2595,"length1":33,"length2":36},{"diffs":[[0,"s=None):"],[1,"\r"],[0,"\n       "]],"start1":2700,"start2":2700,"length1":16,"length2":17},{"diffs":[[0,"(project_id)"],[1,"\r"],[0,"\n        put"]],"start1":2757,"start2":2757,"length1":24,"length2":25},{"diffs":[[0,"ata = {}"],[1,"\r"],[0,"\n       "]],"start1":2784,"start2":2784,"length1":16,"length2":17},{"diffs":[[0,"ct_name:"],[1,"\r"],[0,"\n       "]],"start1":2810,"start2":2810,"length1":16,"length2":17},{"diffs":[[0,"ect_name"],[1,"\r"],[0,"\n       "]],"start1":2855,"start2":2855,"length1":16,"length2":17},{"diffs":[[0,"t_notes:"],[1,"\r"],[0,"\n       "]],"start1":2882,"start2":2882,"length1":16,"length2":17},{"diffs":[[0,"ct_notes"],[1,"\r"],[0,"\n       "]],"start1":2929,"start2":2929,"length1":16,"length2":17},{"diffs":[[0,"a(url, put_data)"],[-1,"\n"],[1,"\r\n\r\n    #Stories\r\n    def story_details(self, story_id):\r\n        url = self.api_url + '/stories/' + str(story_id)\r\n        return self.get_data(url)\r\n    \r\n    def stories_for_task(self, task_id):\r\n        url = self.api_url + '/tasks/' + str(task_id) + '/stories'\r\n        return self.get_data(url)\r\n\r\n    def stories_for_project(self, project_id):\r\n        url = self.api_url + '/projects/' + str(project_id) + '/stories'\r\n        return self.get_data(url)\r\n\r\n    #Tags\r\n    def tag_details(self, tag_id):\r\n        url = self.api_url + '/tags/' + str(tag_id)\r\n        return self.get_data(url)\r\n\r\n    def tag_create(self, tag_data, workspace_id=None):\r\n        \"\"\"\r\n        tag_data: a dictionary of the information for the new tag.\r\n        \"\"\"\r\n        if workspace_id:\r\n            url = self.api_url + '/workspaces/' + str(workspace_id) + '/tags'\r\n        else:\r\n            url = self.api_url + '/tags'\r\n        return self.post_data(url, tag_data)\r\n\r\n    def tags_in_workspace(self, workspace_id):\r\n        url = self.api_url + '/workspaces/' + str(workspace_id) + '/tags'\r\n        return self.get_data(url)\r\n    \r\n    def tag_tasks(self, tag_id):\r\n        url = self.api_url + '/tags/' + str(tag_id) + '/tasks'\r\n        return self.get_data(url)\r\n\r\n    def tag_update(self, tag_id, update_dict):\r\n        url = self.api_url + '/tags/' + str(tag_id)\r\n        return self.post_data(url, update_dict)\r\n\r\n    def tags(self):\r\n        url = self.api_url + '/tags'\r\n        return self.get_data(url)\r\n\r\n    #Tasks\r\n    def task_create(self, workspace_id):\r\n        \"\"\"\r\n        Create new task\r\n        workspace_id: the id of the workspace the task will be attached to.\r\n        \"\"\"\r\n        url = self.api_url + '/workspaces/' + str(workspace_id) + '/tasks'\r\n                \r\n        return self.get_data(url)\r\n\r\n    def task_details(self, task_id):\r\n        url = self.api_url + '/tasks/' + str(task_id)\r\n        return self.get_data(url)\r\n\r\n    def tasks_in_project(self, project_id):\r\n        url = self.api_url + '/projects/' + str(project_id) + '/tasks'\r\n        return self.get_data(url)\r\n    \r\n    def tasks_in_worskapce(self, workspace_id):\r\n        url = self.api_url + '/workspaces/' + str(workspace_id) + '/tasks'\r\n        return self.get_data(url)\r\n\r\n    def tasks(self):\r\n        url = self.api_url + '/tasks'\r\n        return self.get_data(url)\r\n\r"],[0,"\n    # Users\n   "]],"start1":2967,"start2":2967,"length1":33,"length2":2399},{"diffs":[[0," # Users"],[1,"\r"],[0,"\n    def"]],"start1":5354,"start2":5354,"length1":16,"length2":17},{"diffs":[[0,"sers_list(self):"],[1,"\r"],[0,"\n        \"\"\"\n   "]],"start1":5373,"start2":5373,"length1":32,"length2":33},{"diffs":[[0,"f):\r\n        \"\"\""],[1,"\r"],[0,"\n        This me"]],"start1":5386,"start2":5386,"length1":32,"length2":33},{"diffs":[[0,"urn what"],[1,"\r"],[0,"\n       "]],"start1":5475,"start2":5475,"length1":16,"length2":17},{"diffs":[[0,"ongs to."],[1,"\r"],[0,"\n       "]],"start1":5516,"start2":5516,"length1":16,"length2":17},{"diffs":[[0,"to.\r\n        \"\"\""],[1,"\r"],[0,"\n        url = s"]],"start1":5521,"start2":5521,"length1":32,"length2":33},{"diffs":[[0,"i_url + '/users'"],[1,"\r"],[0,"\n        return "]],"start1":5560,"start2":5560,"length1":32,"length2":33},{"diffs":[[0,"lf.get_data(url)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    def users_i"]],"start1":5595,"start2":5595,"length1":33,"length2":35},{"diffs":[[0,", workspace_id):"],[1,"\r"],[0,"\n        \"\"\"\n   "]],"start1":5646,"start2":5646,"length1":32,"length2":33},{"diffs":[[0,"d):\r\n        \"\"\""],[1,"\r"],[0,"\n        Returns"]],"start1":5659,"start2":5659,"length1":32,"length2":33},{"diffs":[[0,"workspace id"],[1,"\r"],[0,"\n        fro"]],"start1":5740,"start2":5740,"length1":24,"length2":25},{"diffs":[[0,", the id"],[1,"\r"],[0,"\n       "]],"start1":5819,"start2":5819,"length1":16,"length2":17},{"diffs":[[0,"anually."],[1,"\r"],[0,"\n       "]],"start1":5854,"start2":5854,"length1":16,"length2":17},{"diffs":[[0,"ly.\r\n        \"\"\""],[1,"\r"],[0,"\n        url = s"]],"start1":5859,"start2":5859,"length1":32,"length2":33},{"diffs":[[0,"'/users'"],[1,"\r"],[0,"\n       "]],"start1":5943,"start2":5943,"length1":16,"length2":17},{"diffs":[[0,"lf.get_data(url)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    def user_de"]],"start1":5970,"start2":5970,"length1":33,"length2":35},{"diffs":[[0,"f, user_id):"],[1,"\r"],[0,"\n        \"\"\""]],"start1":6014,"start2":6014,"length1":24,"length2":25},{"diffs":[[0,"d):\r\n        \"\"\""],[1,"\r"],[0,"\n        Returns"]],"start1":6023,"start2":6023,"length1":32,"length2":33},{"diffs":[[0,"kspaces."],[1,"\r"],[0,"\n       "]],"start1":6105,"start2":6105,"length1":16,"length2":17},{"diffs":[[0,"es.\r\n        \"\"\""],[1,"\r"],[0,"\n        url = s"]],"start1":6110,"start2":6110,"length1":32,"length2":33},{"diffs":[[0,"str(user_id)"],[1,"\r"],[0,"\n        ret"]],"start1":6169,"start2":6169,"length1":24,"length2":25},{"diffs":[[0,"et_data(url)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    # Works"]],"start1":6204,"start2":6204,"length1":25,"length2":27},{"diffs":[[0,"rkspaces"],[1,"\r"],[0,"\n    def"]],"start1":6228,"start2":6228,"length1":16,"length2":17},{"diffs":[[0,"t(self):"],[1,"\r"],[0,"\n       "]],"start1":6260,"start2":6260,"length1":16,"length2":17},{"diffs":[[0,"kspaces'"],[1,"\r"],[0,"\n       "]],"start1":6304,"start2":6304,"length1":16,"length2":17},{"diffs":[[0,"lf.get_data(url)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    def workspa"]],"start1":6331,"start2":6331,"length1":33,"length2":35},{"diffs":[[0,"ace_id):"],[1,"\r"],[0,"\n       "]],"start1":6389,"start2":6389,"length1":16,"length2":17},{"diffs":[[0,"rl + '/workspace"],[1,"s"],[0,"/' + str(workspa"]],"start1":6423,"start2":6423,"length1":32,"length2":33},{"diffs":[[0,"tr(workspace_id)"],[1,"\r"],[0,"\n        return "]],"start1":6446,"start2":6446,"length1":32,"length2":33},{"diffs":[[0,"ata(url)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    def"]],"start1":6489,"start2":6489,"length1":17,"length2":19},{"diffs":[[0,"e_name):"],[1,"\r"],[0,"\n       "]],"start1":6552,"start2":6552,"length1":16,"length2":17},{"diffs":[[0,"orkspace"],[1,"s"],[0,"/' + str"]],"start1":6594,"start2":6594,"length1":16,"length2":17},{"diffs":[[0,"pace_id)"],[1,"\r"],[0,"\n       "]],"start1":6617,"start2":6617,"length1":16,"length2":17},{"diffs":[[0,"ce_name}"],[1,"\r"],[0,"\n       "]],"start1":6662,"start2":6662,"length1":16,"length2":17},{"diffs":[[0,"   return self.p"],[-1,"os"],[1,"u"],[0,"t_data(url, put_"]],"start1":6677,"start2":6677,"length1":34,"length2":33},{"diffs":[[0,"ut_data)"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    # U"]],"start1":6707,"start2":6707,"length1":17,"length2":19},{"diffs":[[0," methods"],[1,"\r"],[0,"\n    def"]],"start1":6732,"start2":6732,"length1":16,"length2":17},{"diffs":[[0,"f, url):"],[1,"\r"],[0,"\n       "]],"start1":6762,"start2":6762,"length1":16,"length2":17},{"diffs":[[0,"l):\r\n        \"\"\""],[1,"\r"],[0,"\n        Users a"]],"start1":6767,"start2":6767,"length1":32,"length2":33},{"diffs":[[0,"ens when"],[1,"\r"],[0,"\n       "]],"start1":6837,"start2":6837,"length1":16,"length2":17},{"diffs":[[0,"have the"],[1,"\r"],[0,"\n       "]],"start1":6900,"start2":6900,"length1":16,"length2":17},{"diffs":[[0," format:"],[-1,"\n"],[1,"\r\n\r"],[0,"\n       "]],"start1":6927,"start2":6927,"length1":17,"length2":19},{"diffs":[[0,"null\"}]}"],[1,"\r"],[0,"\n       "]],"start1":7010,"start2":7010,"length1":16,"length2":17},{"diffs":[[0,"     or "],[1,"\r"],[0,"\n       "]],"start1":7023,"start2":7023,"length1":16,"length2":17},{"diffs":[[0,"uest\"}]}"],[-1,"\n"],[1,"\r\n\r"],[0,"\n       "]],"start1":7089,"start2":7089,"length1":17,"length2":19},{"diffs":[[0,"ta dict."],[1,"\r"],[0,"\n       "]],"start1":7153,"start2":7153,"length1":16,"length2":17},{"diffs":[[0,"     \"\"\""],[1,"\r"],[0,"\n       "]],"start1":7166,"start2":7166,"length1":16,"length2":17},{"diffs":[[0,"ey, ''))"],[1,"\r"],[0,"\n       "]],"start1":7228,"start2":7228,"length1":16,"length2":17},{"diffs":[[0,"et_request.text)"],[1,"\r"],[0,"\n        if 'err"]],"start1":7262,"start2":7262,"length1":32,"length2":33},{"diffs":[[0,"f 'errors' in j:"],[1,"\r"],[0,"\n            ret"]],"start1":7289,"start2":7289,"length1":32,"length2":33},{"diffs":[[0,"        return j"],[1,"\r"],[0,"\n        else:\n "]],"start1":7311,"start2":7311,"length1":32,"length2":33},{"diffs":[[0,"j\r\n        else:"],[1,"\r"],[0,"\n            ret"]],"start1":7326,"start2":7326,"length1":32,"length2":33},{"diffs":[[0,"['data']"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    def"]],"start1":7364,"start2":7364,"length1":17,"length2":19},{"diffs":[[0,"l, p"],[-1,"u"],[1,"os"],[0,"t_data):"],[1,"\r"],[0,"\n   "]],"start1":7402,"start2":7402,"length1":17,"length2":19},{"diffs":[[0,"a=(p"],[-1,"u"],[1,"os"],[0,"t_data))"],[1,"\r"],[0,"\n   "]],"start1":7484,"start2":7484,"length1":17,"length2":19},{"diffs":[[0,"st.text)"],[1,"\r"],[0,"\n       "]],"start1":7533,"start2":7533,"length1":16,"length2":17},{"diffs":[[0,"s' in j:"],[1,"\r"],[0,"\n       "]],"start1":7560,"start2":7560,"length1":16,"length2":17},{"diffs":[[0,"return j"],[1,"\r"],[0,"\n       "]],"start1":7582,"start2":7582,"length1":16,"length2":17},{"diffs":[[0,"   else:"],[1,"\r"],[0,"\n       "]],"start1":7597,"start2":7597,"length1":16,"length2":17},{"diffs":[[0,"['data']"],[1,"\r\n\r\n    def put_data(self, url, put_data):\r\n        put_request = requests.put(url, auth=(self.key, ''), data=(put_data))\r\n        j = json.loads(put_request.text)\r\n        if 'errors' in j:\r\n            return j\r\n        else:\r\n            return j['data']\r"],[0,"\n"]],"start1":7627,"start2":7627,"length1":9,"length2":267}]],"length":7894,"saved":false}
